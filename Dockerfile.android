# Docker file to corsscompile rust code to macOS
ARG RUST_VERSION
FROM rust-builder:$RUST_VERSION
ARG NDK_VERSION

RUN \
    # Check for mandatory build arguments
    : "${NDK_VERSION:?Build argument needs to be set and non-empty.}"

# Install dev tools
RUN apt-get update && apt-get install -y unzip

# Install the android NDK
RUN export NDK_ZIP="/android-ndk-${NDK_VERSION}.zip" && \
    export NDK_URL="https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux-x86_64.zip" && \
    wget -O ${NDK_ZIP} ${NDK_URL} && \
    unzip $NDK_ZIP -d "/opt" && \
	rm $NDK_ZIP && \
	unset NDK_ZIP && \
	unset NDK_URL

# Add android NDK to path
ENV PATH="/opt/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}"

# Install android targets
RUN rustup target add armv7-linux-androideabi aarch64-linux-android x86_64-linux-android i686-linux-android && \
    printf '[target.armv7-linux-androideabi]\nlinker = "armv7a-linux-androideabi29-clang"\n' >> $CARGO_HOME/config && \
    printf '[target.aarch64-linux-android]\nlinker = "aarch64-linux-android29-clang"\n' >> $CARGO_HOME/config && \
    printf '[target.x86_64-linux-android]\nlinker = "x86_64-linux-android29-clang"\n' >> $CARGO_HOME/config && \
    printf '[target.i686-linux-android]\nlinker = "i686-linux-android29-clang"\n' >> $CARGO_HOME/config

WORKDIR /workdir

CMD /bin/bash
